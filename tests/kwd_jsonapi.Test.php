<?php
use PHPUnit\Framework\TestCase;

require_once('../lib/kwd_jsonapi.php');

class mockRexEntity {

	protected $id;
	protected $name;
	protected $clang_id;

	function getId() {
		return $this->id;
	}


	function getName() {
		return $this->name;
	}

	function getClang() {
		return $this->clang_id;
	}

	public function getCreateDate() {
		return strtotime('3 Oct 2018 2:30');
	}

	public function getUpDateDate() {
		return strtotime('20 Dec 2018 2:30');
	}

	public function getClassVars() {
		return [
			'id',
			'name',
			// ??? in rex 5.x it is parent_id !
			'parent_id',
			'catname',
			'clang',
			'createdate',
			'updatedate',
			'startpage'
		];
	}

	/**
	*	returns class value
	*	can be id, name, or generated by 'metainfo' e.g. 'art_teaser'
	*/
	function getValue($value) {

		if ($value == 'id') return $this->id;
		if ($value == 'parent_id') return $this->id;
		if ($value == 'name') return $this->name;
		if ($value == 'catname') return $this->name;
		if ($value == 'clang') return $this->clang_id;
		if ($value == 'createdate') return strtotime('3 Oct 2018 2:30');
		if ($value == 'updatedate') return strtotime('24 Dec 2018 18:05');
		return null;
	}
}

class mockRexArticle extends mockRexEntity {
	private $_isStartArticle;
	private $content;
	protected $category_id;

	function __construct($id, $name = '', $clang_id = 1, $catid, $isStartArticle = false, $content = '') {
		$this->id = $id;
		$this->name = $name;
		$this->_isStartArticle = $isStartArticle ? true : false;
		$this->content = $content;
		$this->clang_id = $clang_id;
		$this->category_id = $catid;
	}

	function isStartArticle() {
		return $this->getValue('startpage'); //_isStartArticle;
	}

	function getValue($key) {
		if ($key == 'startpage') return $this->_isStartArticle ? 1 : 0; // stored bool but redaxo uses int
		if ($key == 'parent_id') return $this->category_id; // stored bool but redaxo uses int
		else return parent::getValue($key);
	}

	// to mock better (internal use, not in Redaxo!)
	function _getContent() {
		return $this->content;
	}
}

class mockRexCategory extends mockRexEntity {

	private $articles = [];

	protected function _addArticle($id,$name,$clang_id,$catid,$isStartArticle,$content) {
		return new mockRexArticle($id,$name,$clang_id,$catid,$isStartArticle,$content);
	}

	function __construct($id,$name,$clang_id) {
		$this->id = $id;
		$this->name = $name;
		$this->clang_id = $clang_id;
		$this->articles[] = $this->_addArticle($id,$name.'_article',$clang_id,$id,true,'<p>voll der Start-Artikel Content</p>');
		// make article 48 if we are in cat 3 which must not be set startarticle
		if ($id==3) {
			$this->articles[] = $this->_addArticle(48,'Android App_article',0,$id,false,'<p>Body of Android App article (id48)</p>');
		}
	}

	public function getId() {
		return $this->id;
	}

	public function getName() {
		return $this->name;
	}

	public function getStartArticle() {
		return $this->articles[0];
	}

	public function getChildren() {
		$myCats = array();

		$myCats[] = new self(12,'Shuri Ryu Berlin',$this->clang_id);
		$myCats[] = new self(7,'TangarÃ¡ Berlin',$this->clang_id);
		$myCats[] = new self(13,'Moldt Events',$this->clang_id);

		return $myCats;
	}

	public function getArticles() {
		return $this->articles;
	}
}



// need an extra derived class
class kwd_jsonapi_test extends kwd_jsonapi {

	/** construct with default parameters
	*	- defaults to request in "parametrical mode"
	*/
	function __construct($method = 'GET', $scheme = 'http', $serverPath = 'localhost/tk/kwd_website/', $query = 'api=kwdapi', $newClangBase = 1) {
		parent::__construct(
			$method,
			$scheme,
			$serverPath,
			$query
			// don;t pass clangbase; remains default == 1
		);
	}

	public function getRootCategories($ignore_offlines = false, $clang = 1) {
		// to mock the root categories we just generate objects from a json
		$rootCats = array();
		$rootCats[] = new mockRexCategory(1,'Start',$clang);
		$rootCats[] = new mockRexCategory(21,'News',$clang);
		$rootCats[] = new mockRexCategory(3,'Referenzen',$clang);

		return $rootCats;
	}

	public function getCategoryById($id, $clang = 1) {
		// mock clang > 0 not found == null
		if (intval($clang) > 1) return null;
		if (intval($id) !== 3) return null;
		// tODO: mock $d ===0
		return new mockRexCategory(3,'Referenzen',$clang);
	}

	public function getRootArticles($ignore_offlines = false, $clang_id = 1) {
		return [ new mockRexArticle(67,'Test Root Article', $clang_id, false, '<p>Body of root article</p>')];
	}

	public function getArticleById($id, $clang = 1) {
		if ($id == 48) return new mockRexArticle($id,'Android App',$clang,3,false,'<p>Body of Android News Article</p>');
		if ($id == 3) return new mockRexArticle($id,'Referenzen, Auswahl',$clang,3,true,'<b>body of referenzen3</b>');

		return null;
	}

	public function getArticleContent($article_id,$clang = 1,$ctype = 1) {
		$foundArt = null;
		$cat = $this->getCategoryById($article_id,$clang);
		if ($cat) {
			$arts = $cat->getArticles();
			if ($arts) foreach ($arts as $art) {
				if ($art->getId() == $article_id) {
					$foundArt = $art;
					break;
				}
			}
		}

		if ($foundArt) return $foundArt->_getContent();
		return "<p>Demo Content for id=$article_id, clang=$clang, ctype=$ctype</p>";
	}

	/** return array of slices for an article
	*	! currently mocked in this function directly
	*	- only knows revision = 0 or 'all'
	*/
	function getSlicesForCtype($article_id, $clang = 1, $ctype = 1, $revision = self::ALL) {

		if (
			($revision !== self::ALL && $revision !== 0)
			|| $clang > 1
			|| $ctype !== 1
		)
		return array();

		return ( array(
			array(
				'id' => "2",
				'clang_id' => "1",
				'ctype_id' => "2",
				'priority' => "1",
				'value1' => "Konzept",
				'value2' => "Das Prinzip entscheidet.",
				'revision' => "0"
			),
			array (
				'id' => "3",
				'clang_id' => "1",
				'ctype_id' => "2",
				'priority' => "2",
				'value1' => "Design",
				'value2' => "Design ist mehr als Layout und Gestaltung.",
				'revision' => "0"
			)
		));
	}
}

// TESTS
// ==================================================================================================

class KwdJsonApiTestCase extends TestCase {

	// HELPERS
	// ------------------------------------------------------------------------

 	function t() {
		self::assertTrue(false,'test bool works');
	}

	private function getKwdapiResponseFromNew($queryString,$returnString = false) {
		$jao = new kwd_jsonapi_test();
		$jao->setApiQueryString('api=kwdapi&'.$queryString);
		$response = $jao->buildResponse();
		$json = json_decode($response);

		if ($returnString) return $response;
		return $json;
	}


	private function runCodeForTestingRootCats($jao) {

		$response = $jao->buildResponse();
		$this->assertInternalType('string',$response);
		$this->assertGreaterThan(3,strlen($response)); // should not be empty (which is for rejected request)

		// the cool thing: expected field names in json are object and array identifiers here ;-)
		$json = json_decode($response);

		$this->assertNotEquals($json,null,'must be != null indicating correct JSON'); // should not be empty (which is for rejected request)
		$this->assertEquals($json->help->info,'Check out the help section too!','help text should be under help > info');
		$this->assertTrue(is_array($json->help->links),'help links section should be array');
		$this->assertEquals('http://localhost/tk/kwd_website/index.php?api=kwdapi&help=1',$json->help->links[0],'help link should contain reasonable api link path');

		// request parametrical entry point!
		$this->assertTrue(strncmp('api=kwdapi',$json->request,6) === 0,$json->request.' must start with api name');

		// check categories, then 1 in detail, then inner article of the first
		// /kwdapi/categories
		$this->assertTrue(isset($json->categories),'No entry "categories"');
		$this->assertTrue(is_array($json->categories),'"categories" is not an array');
		$this->assertEquals(3,count($json->categories),'defined 3 test root categories');
		// first cat
		$cat1 = $json->categories[0];
		$this->assertEquals($cat1->name,'Start','Name of first root category'); // ! now name, not title
		$this->assertEquals($cat1->id,1,'id of first root category');
		$this->assertTrue(!isset($cat1->prior),'!isset: we want NOT prior defined because root categories always given by prio');

		// ! first article should NOT have article
		$this->assertTrue(!isset($cat1->articles),'field "articles"(array) must NOT be there');
	}

	// TESTS
	// ------------------------------------------------------------------------

    public function testInitInConstructor() {
		$jao = new kwd_jsonapi_test(); // default settings see test class declaration
		// test the construct ... getConfiguration path
		$conf = $jao->getConfiguration();
		$this->assertArrayHasKey('requestMethod',$conf); // redundant because array indices used below
		$this->assertSame($conf['requestMethod'],'get','request method must be valid case insensitive');
		$this->assertSame('http://localhost/tk/kwd_website',$conf['baseUrl'],'baseUrl must eliminate trailing slashes');
		$this->assertStringStartsWith('api=kwdapi',$conf['queryString'],'queryString must have "api="...');
    }

	public function testCorrectBaseUrl() {
		$jao = new kwd_jsonapi_test('get','http','localhost/tk/kwd_website','api=');
		$this->assertSame($jao->getConfiguration()['baseUrl'],'http://localhost/tk/kwd_website');
		$jao = new kwd_jsonapi_test('get','http','localhost2/tk/kwd_website/');
		$this->assertSame($jao->getConfiguration()['baseUrl'],'http://localhost2/tk/kwd_website');
		$jao = new kwd_jsonapi_test('get','http','localhost3/tk/kwd_website//');
		$this->assertSame($jao->getConfiguration()['baseUrl'],'http://localhost3/tk/kwd_website');

		// ... hope GC frees mem of all the 3 objects
	}

	public function testNoApiRequest() {
		$jao = new kwd_jsonapi_test('get','http','localhost/tk/kwd_website///','article_id=1&amp;clang=1');
		$this->assertEquals('',$jao->buildResponse(),'empty string is ok here');

		$jao = new kwd_jsonapi_test('get','http','localhost/tk/kwd_website','/');
		$this->assertEquals($jao->buildResponse(),'','empty string is ok here');

		$jao = new kwd_jsonapi_test('get','http','localhost/tk/kwd_website','');
		$this->assertEquals($jao->buildResponse(),'','empty string is ok here');
	}

	public function testCollectingHeadersSeparately() {
		$jao = new kwd_jsonapi_test(); // default init
		$accesControlOrigin = 'Access-Control-Allow-Origin: *';
		// ??? add additional init because otherwise the array already filled
		$this->assertSame($jao->getHeaders(),array(),'must be empty array because no response built');
		$headers = $jao->addHeader('HTTP/1.0 403 Forbidden');
		$headers = $jao->addHeader($accesControlOrigin);
		$headers = $jao->addHeader('Content-Type: application/json; charset=UTF-8');
		$this->assertCount(3,$jao->getHeaders(),'should insert 3 entries');
		$this->assertEquals($jao->getHeaders()[0],'HTTP/1.0 403 Forbidden','sample check index 0');
		$this->assertEquals($jao->getHeaders()[1],$accesControlOrigin,'sample check index 1');
	}

	// api naming missing
	public function testIgnoreApiOnBuildResponse() {
		$jao = new kwd_jsonapi_test('GET','http','article_id=23','localhost');
		$ret = $jao->buildResponse();
		$this->assertTrue(is_string($ret));
		$this->assertSame('',$ret,'no API request must lead to empty string');
	}


	// /kwdapi
	public function testGenerateResponseForEntryPoint() {
		$jao = new kwd_jsonapi_test();
		$this->runCodeForTestingRootCats($jao);
	}

	// /kwdapi/help
	// - should also suggest "/kwdapi/categories/0/contents"
	function testHelpSectionLinks() {
		$json = $this->getKwdApiResponseFromNew('help=1');
		$this->assertTrue(isset($json->examples),'should have "help"');
		$this->assertTrue(isset($json->info),'should have "help"');
		$this->assertTrue(is_array($json->examples),'should have list of "examples"');
		$this->assertTrue(is_array($json->external->links),'should have list of "external" links');
		self::markTestIncomplete('help links not tested');
	}


	// ! not determindes by query parameter yet but through 'setDebugMode'
	function testEnableDebugModeForRequestCheck() {
		$jao = new kwd_jsonapi_test();
		$jao->setApiQueryString('api=kwdapi&category_id=0&debug=1');
		$jao->setDebugMode(true);
		$json = json_decode($jao->buildResponse());
		self::assertTrue(isset($json->debug),'must have debug section');
		self::assertTrue(isset($json->debug->query),'must have query debug section');
	}

	function testCleanOutputWhenDebugNotRequested() {
		$json = $this->getKwdApiResponseFromNew('category_id=0');
		self::assertFalse(isset($json->debug),'must not have debug section');
	}

	public function testGenerateResponseForRootCategories() {
		$jao = new kwd_jsonapi_test();
		$jao->setApiQueryString('api=kwdapi&category_id=0');
		$this->runCodeForTestingRootCats($jao);
	}

	// ! following tests are reduced thus rely on more detailed checks above

	// /kwdapi/categories/3
	public function testGenerateResponseForCertainCategory() {

		// TODO: make helper function for this 4 lines:
		$jao = new kwd_jsonapi_test();
		$jao->setApiQueryString('api=kwdapi&category_id=3');

		$response = $jao->buildResponse();
		$json = json_decode($response);

		// should be ok to have '3' *type: string*
		$this->assertEquals(3,$jao->getConfiguration()['queryData']['category_id'],'must have selected cat 3');
		$this->assertSame(1,$jao->getConfiguration()['queryData']['clang'],'must have selected clang 1');

		$this->assertSame('Referenzen',$json->name);
		$this->assertSame($json->name,'Referenzen');
		$this->assertSame($json->id,3);
		// ! categories now contains sub catgeories of category 3
		$this->assertTrue(isset($json->categories),'No entry "categories"');
		$this->assertTrue(is_array($json->categories),'"categories" is not an array');
		$definedKids = 3;
		$this->assertEquals($definedKids,count($json->categories),"defined $definedKids sub cats online (cat id == 3)");

		// sample: 3rd kid
		$cat1 = $json->categories[2];
		$this->assertEquals($cat1->name,'Moldt Events','Name of 3rd sub category'); // ! now name, not title
		$this->assertEquals($cat1->id,13,'id of 3rd sub category');
		$this->assertTrue(!isset($cat1->prior),'!isset: we want NOT prior defined because categories always given by prio');

		// // article of 2nd cat must NOT be present
		$this->assertFalse(isset($cat1->articles),'field "articles" must NOT be in this repsonse');
	}

	public function testLanguage1EqualsLanguageDefault() {
		$json1 = $this->getKwdApiResponseFromNew('category_id=3');
		$json2 = $this->getKwdApiResponseFromNew('category_id=3&clang=1');

		$this->assertEquals('Referenzen',$json1->name, 'selected my test cat.');
		// cannot be same bacause prints request too
		// hence compare sampple fields
			// $this->assertEquals($res1,$res2, 'response should be the same.');
		$this->assertEquals($json1->name,$json2->name,'name');
		$this->assertEquals($json1->updatedate,$json2->updatedate,'name');
	}

	// clang=0 currently valid and turned into clang=1
	// ! should be noted in docs
	public function testLanguage0NotFound() {
		$json = $this->getKwdApiResponseFromNew('category_id=3&clang=0');
		// $this->assertTrue(isset($json->error),'should have error element');
		// $headers = $jao->getHeaders();
		// $this->assertContains('HTTP/1.1 404 Not Found',$headers,'must contain HTTP 404 header');
		self::markTestIncomplete('ok to have clang 0 turned into default (clang 1)?');
	}

	// /kwdapi/categories/3/2 must be valid but not found
	public function testLanguage2NotFound() {
		$jao = new kwd_jsonapi_test();
		$jao->setApiQueryString('api=kwdapi&category_id=3&clang=2');
		$json = json_decode($jao->buildResponse());
		$this->assertTrue(isset($json->error),'should have error element');
		$this->assertContains('HTTP/1.1 404 Not Found',$jao->getHeaders(),'must contain HTTP 404 header');
	}

	function testRequestUnknownCategory() {
		$json = $this->getKwdApiResponseFromNew('category_id=1234');
		$this->assertTrue(isset($json->error),'should have error element');
		$this->assertNotFalse(strstr($json->error->message,'Resource for this request not found.'),'should have "not found" message');
	}

	// /kwdapi/categories/3/articles
	function testRequestCategoryWithSubCategoriesAndSubArticles() {
		$response = $this->getKwdApiResponseFromNew('category_id=3&includes=articles');
		// ! in the case of cat 3 wie mocked 2 articles
		$this->assertEquals(2,count($response->articles),'field "articles" of cat 3 must contain 2 elements');
		$cat1 = $response->categories[0];
		$this->assertSame('Shuri Ryu Berlin',$cat1->name,'should have a subcat with name');
		$art1 = $cat1->articles[0];
		$this->assertTrue($art1 !== null);
		$this->assertEquals('Shuri Ryu Berlin_article',$art1->name,'should have article name');
		$this->assertEquals(12,$art1->id);
		$this->assertSame(1,$art1->startpage,'should be set as "start article"');
		
		$this->assertContains('&category_id=12&clang=1&articles=1',$cat1->link,'should have parametrical link to categories[0]');
	}

	function testProvidesLinkToArticlesInList() {

	}

	// /kwdapi/categories/3/contents
	//  ! must be invalid because need '.../articles'
	function testRequestCategoryWithContentBadRequest() {
		$jao = new kwd_jsonapi_test();
		$jao->setApiQueryString('api=kwdapi&category_id=3&contents=1');
		$response = $jao->buildResponse();
		$json = json_decode($response);
		$headers = $jao->getHeaders();
		$this->assertTrue(isset($json->error->message),'should have error field with message');
		$this->assertContains('You cannot request "contents" without requesting "articles"',$json->error->message,'should have message expressing wrong semantacis or syntax');
		$this->assertContains('HTTP/1.1 400 Bad Request',$headers);
	}

	// request articles, contents from entry point
	// ! currently invalid
	function testRequestEntryPointWithContent() {
		$json = $this->getKwdApiResponseFromNew('includes=articles,contents');
		// sample: pick cat2, start article content
		$this->assertFalse(isset($json->categories), 'should have NO cats');
		$this->assertContains('Syntax error or unknown reques',$json->error->message,'message for syntax error');
	}

	// request articles, contents from root
	function testRequestRootCategoriesWithContent() {
		$json = $this->getKwdApiResponseFromNew('category_id=0&includes=articles,contents');
		// sample: pick cat2, start article content
		$this->assertTrue(isset($json->categories[1]), 'should have 2 cats');
		$this->assertTrue(isset($json->categories[1]->articles[0]), '2nd cat should have 1 article');
		$art = $json->categories[1]->articles[0];
		$this->assertTrue(isset($art->body),'should have body');
		$this->assertInternalType('string',$art->body);
		$this->assertContains('Demo Content for id=21',$art->body); // id=21 is second root cat in list
	}

	// /kwdapi/categories/3/0/articles/contents
	function testRequestCategory3WithContent() {
		// ??? still clang=0 no error but handled as clang=1
		$json = $this->getKwdApiResponseFromNew('category_id=3&clang=1&includes=articles,contents');

		// sample: pick 3rd cat, start article content
		$art = $json->categories[2]->articles[0];
		// $this->assertSame(21,$art->id,'should have proper id');
		// $this->assertSame('News_article',$art->name,'should have proper id');
		$this->assertTrue(isset($art->body),'should have body');
		$this->assertInternalType('string',$art->body);
		$this->assertSame('Moldt Events_article',$art->name,'name should contain certain text');
		$this->assertSame('<p>Demo Content for id=13, clang=1, ctype=1</p>',$art->body,'body should contain certain text');

		// self::t();
	}

	// ctype 2
	// ??? how to request
	function testRequestRootCategoriesWithContentAndCtype2() {
		$json = $this->getKwdApiResponseFromNew('category_id=0&includes=articles&contents=2');
		// sample: pick cat2, start article content
		$this->assertTrue(isset($json->categories[1]->articles),'should have articles list');
		$art = $json->categories[1]->articles[0];
		$this->assertTrue(isset($art->body),'should have body');
		$this->assertInternalType('string',$art->body);
		$this->assertSame('<p>Demo Content for id=21, clang=1, ctype=2</p>',$art->body);
	}

	function testRequestCategory3WithContentAndCtype2() {
		$json = $this->getKwdApiResponseFromNew('api=kwdapi&category_id=3&includes=articles&contents=2');
		// sample: pick 3rd cat, start article content
		$art = $json->categories[2]->articles[0];
		$this->assertSame(13,$art->id,'should have proper id');
		$this->assertSame('Moldt Events_article',$art->name,'should have proper id');
		$this->assertTrue(isset($art->body),'should have body');
		$this->assertInternalType('string',$art->body);
		$this->assertSame('Moldt Events_article',$art->name,'name should contain certain text');
		$this->assertSame('<p>Demo Content for id=13, clang=1, ctype=2</p>',$art->body,'body should contain certain text');
	}

	// ! it's not a problem equal to "hierarchical"; here you just provide an (in)valid id
	function testRequestAllArticles() {
		$json = $this->getKwdApiResponseFromNew('article_id=0');
		$this->assertTrue(isset($json->error),'must have "error" because cannot list ALL articles');
		$this->assertContains('cannot request all articles',$json->error->message,'must have sensible error message/type');
	}

	// /kwdapi/articles/48/contents
	function testRequestSingleArticleWithContent() {
		$json = $this->getKwdApiResponseFromNew('article_id=48&includes=contents');
	 	$this->assertFalse(isset($json->articles),'must not have sub articles');
		$this->assertSame(48,$json->id,'must have id unequal to its cat');
		$this->assertSame(3,$json->parent_id,'must have parent_id; unequal to its cat');
		$this->assertSame('Android App',$json->catname,'must have catname');
	}

	function testRequestSingleArticleWithContentSetTo0() {
		$json = $this->getKwdApiResponseFromNew('article_id=48&contents=0');
	 	$this->assertFalse(isset($json->articles),'must not have sub articles');
		$this->assertSame(48,$json->id,'must have id unequal to its cat');
		$this->assertSame(3,$json->parent_id,'must have re_id; unequal to its cat');
		$this->assertSame('Android App',$json->catname,'must have catname');
		$this->assertFalse(isset($json->articles),'must not have articles as sub field');
		$this->assertFalse(isset($json->body),'must not have body');
	}

	// /kwdapi/articles/3
	function testRequestSingleArticleWhenStartArticle() {
		$json = $this->getKwdApiResponseFromNew('article_id=3');
		$this->assertFalse(isset($json->error),'must NOT have "error" because  valid');
	}

	function testRequestSlicesWithoutArticleId() {
		$json = $this->getKwdApiResponseFromNew('slices=all');
		self::assertContains('select an "article" to get "slices"',$json->error->message,'error msg must explain that article id needed');
	}

	function testGetSlicesForSingleArticleByArticleId() {
		$json = $this->getKwdApiResponseFromNew('article_id=3&slices=all');
		self::assertInternalType('array',$json->slices,'slices must be array');
	}


	// /kwdapi/categories/3/meta

	// ??? how to provide all ctypes
	// ???: /kwdapi/categories traverses *entire structure*

	// public function testSendResponse() {
	// 	// ??? how to test successful send
	// 	$this->markTestIncomplete();
	// }

	// ! with different api name
	// /alternative_api/categories/3/articles

	// with slices=all|show
	// with ctype=<id>
	// with offlines=true|1
}
